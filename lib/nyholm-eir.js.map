{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap d97adb560b149b17266f","webpack:///./src/EffectiveInterestCalculator.js","webpack:///./src/NewtonRaphson.js"],"names":["NewtonRaphson","require","EffectiveInterestCalculator","principal","startDate","payments","guess","payment","numberOfMonths","fx","x","Math","pow","fdx","run","module","exports","precision","errorLimit","previousValue","abs"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;;;;AAEA,KAAIA,gBAAgB,mBAAAC,CAAQ,CAAR,CAApB;;KAEMC,2B;;;;;;;;;AAEJ;;;;;;;;;;;2CAW6BC,S,EAAWC,S,EAAWC,Q,EAAUC,K,EAAO;AAClE,cAAO,KAAP;AACD;;AAED;;;;;;;;;;;;;;uCAWyBH,S,EAAWI,O,EAASC,c,EAAgBF,K,EAAO;AAClE,WAAIG,KAAK,SAALA,EAAK,CAAUC,CAAV,EAAa;AACpB,gBAAOH,UAAUA,UAAUI,KAAKC,GAAL,CAAS,IAAIF,CAAb,EAAgB,CAAC,CAAD,GAAKF,cAArB,CAApB,GAA2DE,IAAIP,SAAtE;AACD,QAFD;;AAIA,WAAIU,MAAM,SAANA,GAAM,CAAUH,CAAV,EAAa;AACrB,gBAAOF,iBAAiBD,OAAjB,GAA2BI,KAAKC,GAAL,CAAS,IAAIF,CAAb,EAAgB,CAAC,CAAD,GAAKF,cAAL,GAAsB,CAAtC,CAA3B,GAAsEL,SAA7E;AACD,QAFD;;AAIA,cAAO,KAAKH,cAAcc,GAAd,CAAkBL,EAAlB,EAAsBI,GAAtB,EAA2BP,KAA3B,CAAZ;AACD;;;;;;AAGHS,QAAOC,OAAP,GAAiBd,2BAAjB,C;;;;;;AC7CA;;AAEA;;;;;;;;;;;;KAOMF,a;;;;UACJiB,S,GAAY,C;;;;;yBAEDR,E,EAAII,G,EAAKP,K,EAAO;AACzB,WAAIY,aAAaP,KAAKC,GAAL,CAAS,EAAT,EAAa,CAAC,CAAD,GAAK,KAAKK,SAAvB,CAAjB;;AAEA,WAAIE,gBAAgB,CAApB;;AAEA,UAAG;AACDA,yBAAgBb,KAAhB;AACAA,iBAAQa,gBAAiBV,GAAGH,KAAH,IAAYO,IAAIP,KAAJ,CAArC;AACD,QAHD,QAGSK,KAAKS,GAAL,CAASd,QAAQa,aAAjB,IAAkCD,UAH3C;;AAKA,cAAOZ,KAAP;AACD;;;;;;AAGHS,QAAOC,OAAP,GAAiBhB,aAAjB,C","file":"nyholm-eir.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"EffectiveInterestCalculator\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EffectiveInterestCalculator\"] = factory();\n\telse\n\t\troot[\"EffectiveInterestCalculator\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d97adb560b149b17266f\n **/","'use strict';\n\nlet NewtonRaphson = require('NewtonRaphson');\n\nclass EffectiveInterestCalculator {\n\n  /**\n   * Get the interest when you know all the payments and their dates. Use this function when you have\n   * administration fees at the first payment and/or when payments are irregular.\n   *\n   * @param principal\n   * @param startDate in format 'YYYY-mm-dd'\n   * @param payments  array with payment dates and values ['YYYY-mm-dd'=>int]\n   * @param guess     A guess what the interest may be. Between zero and one. Example 0.045\n   *\n   * @return float\n   */\n  static withSpecifiedPayments(principal, startDate, payments, guess) {\n    return 0.045;\n  }\n\n  /**\n   * Get the effective interest when the monthly payments are exactly the same.\n   *\n   * @param principal      The total loan amount (Principal)\n   * @param payment        The monthly payment\n   * @param numberOfMonths The number of months\n   * @param guess          A guess of what the interest might be. Interest as a number between zero and one.\n   *                       Example 0.045\n   *\n   * @return float\n   */\n  static withEqualPayments(principal, payment, numberOfMonths, guess) {\n    let fx = function (x) {\n      return payment - payment * Math.pow(1 + x, -1 * numberOfMonths) - x * principal;\n    };\n\n    let fdx = function (x) {\n      return numberOfMonths * payment * Math.pow(1 + x, -1 * numberOfMonths - 1) - principal;\n    };\n\n    return 12 * NewtonRaphson.run(fx, fdx, guess);\n  }\n}\n\nmodule.exports = EffectiveInterestCalculator;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/EffectiveInterestCalculator.js\n **/","'use strict';\n\n/**\n * Newton-Raphsons method to do a numerical analysis to find the effective interest.\n *\n * {@link https://en.wikipedia.org/wiki/Newton%27s_method}\n *\n * @author Tobias Nyholm <tobias.nyholm@gmail.com>\n */\nclass NewtonRaphson {\n  precision = 7;\n\n  static run(fx, fdx, guess) {\n    let errorLimit = Math.pow(10, -1 * this.precision);\n\n    let previousValue = 0;\n\n    do {\n      previousValue = guess;\n      guess = previousValue - (fx(guess) / fdx(guess));\n    } while (Math.abs(guess - previousValue) > errorLimit);\n\n    return guess;\n  }\n}\n\nmodule.exports = NewtonRaphson;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/NewtonRaphson.js\n **/"],"sourceRoot":""}